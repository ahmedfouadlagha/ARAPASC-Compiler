/* Generated By:JavaCC: Do not edit this line. ARAPASC.java */
package parser;

import java.util.*;
import java.io.*;

public class ARAPASC implements ARAPASCConstants {
  static ArrayList<String> Pascal = new ArrayList<String>();
  static ArrayList<String> C = new ArrayList<String>();
  public static void main(String args []) throws IOException,ParseException
  {
    //Saisir le programme ARAPASC 
        FileInputStream file = new FileInputStream("src/test/All.txt");
        ARAPASC parser = new ARAPASC(file);
        parser.Start();
        //programme pascal
        File file_PASCAL = new File("src/resultat/PASCAL_programme.pas");

    try {
      FileWriter Writer_PASCAL = new FileWriter(file_PASCAL);
          for(String P:Pascal)
                Writer_PASCAL.write(P);

      Writer_PASCAL.close();
      System.out.println("Le programme a \u00e9t\u00e9 converti en Pascal.");
    } catch (IOException e) {
      System.out.println("Une erreur s'est produite.");
      e.printStackTrace();
    }
    //programme c
    File file_C = new File("src/resultat/C_programme.c");

    try {
      FileWriter Writer_C = new FileWriter(file_C);
      for(String c:C)
                Writer_C.write(c);

      Writer_C.close();
      System.out.println("Le programme a \u00e9t\u00e9 converti en C.");
    } catch (IOException e) {
      System.out.println("Une erreur s'est produite.");
      e.printStackTrace();
    }
        file.close();
  }

//analyseur syntaxique  static final public void Start() throws ParseException {
    program();
    jj_consume_token(0);
  }

  static final public void program() throws ParseException {
                  Token t;
    jj_consume_token(BARNAMEDJ);
    t = jj_consume_token(IDENTIFIER);
    jj_consume_token(POINTVERGULE);
    Pascal.add("program  "+t.toString()+";\u005cn");
                                                    C.add("#include <iostream>\u005cnusing namespace std;\u005cnint main(){\u005cn ");
    declaration();
    jj_consume_token(BIDAYA);
               Pascal.add("begin\u005cn");
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case FLOAT:
      case CHAR:
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case OUKTOUB:
      case IKRAA:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Statement();
    }
    jj_consume_token(NIHAYA);
    jj_consume_token(POINT);
                         Pascal.add("\u005cnend.");
                                                   C.add(" \u005cnreturn 0; }");
  }

  static final public void declaration() throws ParseException {
                      Token t1,t2; ArrayList<String> C_ident = new ArrayList<String>();
    jj_consume_token(MOUTAGHAIRE);
    jj_consume_token(DEUXPOINT);
                                  Pascal.add("Var :\u005cn");
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      t1 = jj_consume_token(IDENTIFIER);
                          Pascal.add(t1.toString()); C_ident.add(t1.toString());
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        t2 = jj_consume_token(IDENTIFIER);
                                      Pascal.add(","+t2.toString()); C_ident.add(","+t2.toString());
      }
      jj_consume_token(DEUXPOINT);
                    Pascal.add(" : ");
      type();
      jj_consume_token(POINTVERGULE);
                       Pascal.add(";\u005cn");C.addAll(C_ident); C.add(";\u005cn"); C_ident.clear();
    }
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
              Pascal.add("integer "); C.add("int ");
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
                  Pascal.add("boolean "); C.add("bool ");
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
                Pascal.add("real "); C.add("float ");
      break;
    case CHAR:
      jj_consume_token(CHAR);
               Pascal.add("char "); C.add("char ");
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case FLOAT:
    case CHAR:
    case IDENTIFIER:
      SequenceStatement();
      break;
    case IF:
      ConditionalStatements();
      break;
    case DO:
    case WHILE:
    case FOR:
      LoopStatement();
      break;
    case IKRAA:
      ReadStatement();
      break;
    case OUKTOUB:
      WriteStatement();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ReadStatement() throws ParseException {
                         Token t15,t16;
    jj_consume_token(IKRAA);
    jj_consume_token(LC);
    t15 = jj_consume_token(IDENTIFIER);
                                       Pascal.add("Read ("+t15.toString()); C.add("cin >> "+t15.toString());
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      t16 = jj_consume_token(IDENTIFIER);
                                  Pascal.add(","+t16.toString()); C.add(" >> "+t16.toString());
    }
    jj_consume_token(RC);
    jj_consume_token(POINTVERGULE);
                            Pascal.add(");"); C.add(" >> endl;\u005cn");
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case FLOAT:
      case CHAR:
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case OUKTOUB:
      case IKRAA:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      Statement();
    }
  }

  static final public void WriteStatement() throws ParseException {
                          Token t18,t19;
    jj_consume_token(OUKTOUB);
    jj_consume_token(LC);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MESSAGE:
      t18 = jj_consume_token(MESSAGE);
                         Pascal.add("Write ("+t18.toString()); C.add("cout << "+t18.toString());
      break;
    case IDENTIFIER:
      t19 = jj_consume_token(IDENTIFIER);
                         Pascal.add("Write ("+t19.toString()); C.add("cout << "+t19.toString());
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MESSAGE:
        t18 = jj_consume_token(MESSAGE);
                           Pascal.add(","+t18.toString()); C.add(" << "+t18.toString());
        break;
      case IDENTIFIER:
        t19 = jj_consume_token(IDENTIFIER);
                               Pascal.add(","+t19.toString()); C.add(" << "+t19.toString());
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RC);
    jj_consume_token(POINTVERGULE);
                          Pascal.add(");\u005cn"); C.add(" << endl ;\u005cn");
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case FLOAT:
      case CHAR:
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case OUKTOUB:
      case IKRAA:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_7;
      }
      Statement();
    }
  }

  static final public void SequenceStatement() throws ParseException {
                            Token t3;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case BOOLEAN:
    case FLOAT:
    case CHAR:
      statement();
      break;
    case IDENTIFIER:
      t3 = jj_consume_token(IDENTIFIER);
                                       Pascal.add(t3.toString()); C.add(t3.toString());
      assignment();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(POINTVERGULE);
                      Pascal.add(";\u005cn"); C.add(";\u005cn");
  }

  static final public void statement() throws ParseException {
                     Token t4,t5,t6,t7,t8,t9;
    type();
    t9 = jj_consume_token(IDENTIFIER);
                                   Pascal.add(t9.toString()); C.add(t9.toString());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
                 Pascal.add(" := "); C.add(" = ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t4 = jj_consume_token(INTEGER_LITERAL);
                                    Pascal.add(t4.toString()); C.add(t4.toString());
        break;
      case FLOAT_LITERAL:
        t5 = jj_consume_token(FLOAT_LITERAL);
                                         Pascal.add(t5.toString()); C.add(t5.toString());
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      t6 = jj_consume_token(IDENTIFIER);
                                 Pascal.add("," + t6.toString()); C.add("," + t6.toString());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
                  Pascal.add(":="); Pascal.add("=");
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
          t7 = jj_consume_token(INTEGER_LITERAL);
                                    Pascal.add(t7.toString()); C.add(t7.toString());
          break;
        case FLOAT_LITERAL:
          t8 = jj_consume_token(FLOAT_LITERAL);
                                         Pascal.add(t8.toString()); C.add(t8.toString());
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    }
  }

  static final public void assignment() throws ParseException {
    jj_consume_token(ASSIGN);
              Pascal.add(":="); C.add(" = ");
    Expression();
  }

  static final public void Expression() throws ParseException {
    AdditiveExpression();
  }

  static final public void AdditiveExpression() throws ParseException {
    MultiplicativeExpression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case MIN:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
              Pascal.add("+"); C.add("+");
        break;
      case MIN:
        jj_consume_token(MIN);
                                                       Pascal.add("-"); C.add("-");
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MultiplicativeExpression();
    }
  }

  static final public void MultiplicativeExpression() throws ParseException {
    UnaryExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
      case DIV:
      case MODULO:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
              Pascal.add("*"); C.add("*");
        break;
      case DIV:
        jj_consume_token(DIV);
                                                       Pascal.add("/");C.add("/");
        break;
      case MODULO:
        jj_consume_token(MODULO);
                                                                                                  Pascal.add("%"); C.add("%");
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      UnaryExpression();
    }
  }

  static final public void UnaryExpression() throws ParseException {
                           Token t9,t10,t11;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      t9 = jj_consume_token(INTEGER_LITERAL);
                                 Pascal.add(t9.toString()); C.add(t9.toString());
      break;
    case FLOAT_LITERAL:
      t10 = jj_consume_token(FLOAT_LITERAL);
                                Pascal.add(t10.toString()); C.add(t10.toString());
      break;
    case IDENTIFIER:
      t11 = jj_consume_token(IDENTIFIER);
                             Pascal.add(t11.toString()); C.add(t11.toString());
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ConditionalStatements() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LC);
              Pascal.add("if ("); C.add("if (");
    Logiccondition();
    jj_consume_token(RC);
    jj_consume_token(DO);
                                                                                  Pascal.add(") do \u005cn "); C.add(") { \u005cn ");
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case BOOLEAN:
      case FLOAT:
      case CHAR:
      case IF:
      case DO:
      case WHILE:
      case FOR:
      case OUKTOUB:
      case IKRAA:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
      Statement();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
             Pascal.add("else\u005cn"); C.add("\u005cn} else{ \u005cn");
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case FLOAT:
        case CHAR:
        case IF:
        case DO:
        case WHILE:
        case FOR:
        case OUKTOUB:
        case IKRAA:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_12;
        }
        Statement();
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(ENDIF);
              Pascal.add("end;\u005cn"); C.add(" }\u005cn");
  }

  static final public void Logiccondition() throws ParseException {
    Condition();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
    case OR:
      Logic();
      Logiccondition();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  static final public void Logic() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
          Pascal.add(" and "); C.add(" && ");
      break;
    case OR:
      jj_consume_token(OR);
                                                         Pascal.add(" or ");C.add(" || ");
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Condition() throws ParseException {
    Expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT:
    case LE:
    case GT:
    case GE:
    case EQ:
    case NE:
      Relationship();
      Expression();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void Relationship() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GT:
      jj_consume_token(GT);
           Pascal.add(" > "); C.add(" > ");
      break;
    case LT:
      jj_consume_token(LT);
           Pascal.add(" < "); C.add(" < ");
      break;
    case GE:
      jj_consume_token(GE);
           Pascal.add(" >= "); C.add(" >= ");
      break;
    case LE:
      jj_consume_token(LE);
           Pascal.add(" <= "); C.add(" <= ");
      break;
    case NE:
      jj_consume_token(NE);
           Pascal.add(" <> "); C.add(" != ");
      break;
    case EQ:
      jj_consume_token(EQ);
           Pascal.add(" = "); C.add(" == ");
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void LoopStatement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(LC);
                     Pascal.add("while ( "); C.add(" while ( ");
      Logiccondition();
      jj_consume_token(RC);
                                                                                           Pascal.add(" ) do\u005cnbegin"); C.add(" ) { \u005cn");
      jj_consume_token(DO);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case FLOAT:
        case CHAR:
        case IF:
        case DO:
        case WHILE:
        case FOR:
        case OUKTOUB:
        case IKRAA:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_13;
        }
        Statement();
      }
      jj_consume_token(ENDWHILE);
                    Pascal.add("end;\u005cn"); C.add(" } ");
      break;
    case DO:
      jj_consume_token(DO);
                 Pascal.add("repeat\u005cn"); C.add(" do { \u005cn ");
      Statement();
      jj_consume_token(WHILE);
      jj_consume_token(LC);
                         Pascal.add("\u005cnuntil ( "); C.add(" } while ( ");
      Logiccondition();
      jj_consume_token(RC);
      jj_consume_token(POINTVERGULE);
                                                                                                                  Pascal.add(" );\u005cn"); C.add(" );\u005cn");
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(LC);
                       Pascal.add("for ( "); C.add("for ( ");
      statement();
      jj_consume_token(POINTVERGULE);
                                                                                             Pascal.add(";"); C.add(";");
      Logiccondition();
      jj_consume_token(POINTVERGULE);
                                            Pascal.add(";"); C.add(";");
      crease();
      jj_consume_token(RC);
      jj_consume_token(DO);
                               Pascal.add(")\u005cn"); C.add(") { \u005cn");
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INT:
        case BOOLEAN:
        case FLOAT:
        case CHAR:
        case IF:
        case DO:
        case WHILE:
        case FOR:
        case OUKTOUB:
        case IKRAA:
        case IDENTIFIER:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_14;
        }
        Statement();
      }
      jj_consume_token(ENDFOR);
                       Pascal.add("end;\u005cn"); C.add(" }\u005cn");
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void crease() throws ParseException {
                  Token t12;
    t12 = jj_consume_token(IDENTIFIER);
                       Pascal.add(t12.toString()); C.add(t12.toString());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADDONE:
    case MINUTEONE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADDONE:
        jj_consume_token(ADDONE);
               Pascal.add("++"); C.add("++");
        break;
      case MINUTEONE:
        jj_consume_token(MINUTEONE);
                  Pascal.add("--"); C.add("--");
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ARAPASCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa87c000,0x0,0x0,0x3c000,0xa87c000,0x0,0xa87c000,0x0,0x0,0x0,0xa87c000,0x3c000,0x180,0x0,0x0,0x180,0x0,0x0,0x0,0x0,0x0,0x180,0xa87c000,0xa87c000,0x80000,0x0,0x0,0x0,0x0,0xa87c000,0xa87c000,0xa800000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x80003,0x80000,0x10000000,0x0,0x80003,0x10000000,0x80003,0x80000,0x10000000,0x80000,0x80003,0x80000,0x0,0x80,0x10000000,0x0,0x80,0xc,0xc,0x70,0x70,0x80000,0x80003,0x80003,0x0,0x30000,0x30000,0xfc00,0xfc00,0x80003,0x80003,0x0,0x300,0x300,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public ARAPASC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ARAPASC(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ARAPASCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ARAPASC(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ARAPASCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ARAPASC(ARAPASCTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ARAPASCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
